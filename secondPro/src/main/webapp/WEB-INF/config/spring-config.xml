<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">


	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- ============ 뷰 리졸버에 대한 등록(기본 파일시스템으로 연결,ㅡ tiles 기반)  ========= -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2" />
	</beans:bean>
	<!-- tiles 작업할 수 있도록 설정 -->	
	 <beans:bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
				<beans:value>/WEB-INF/config/tiles-config.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>

	<beans:bean id="tilesviewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView"/>
		<beans:property name="order" value="1" />	 
	</beans:bean>

	<beans:bean id="con" class="org.springframework.jndi.JndiObjectFactoryBean">
		<beans:property name="jndiName" value="jdbc/myspring"/>
		<beans:property name="resourceRef" value="true"/>
	</beans:bean>
	
	<beans:bean id="template" class="org.springframework.jdbc.core.JdbcTemplate">
		<beans:property name="dataSource" ref="con"/>
	</beans:bean>

	<context:component-scan base-package="kr.kitri" />
	<context:component-scan base-package="emp" />
	
	<!-- ============ Mybatisc  ========= -->
	<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="con"/>
		<beans:property name="configLocation" value="/WEB-INF/config/mybatis-config.xml"/>
	</beans:bean>
	<beans:bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg ref="sqlSessionFactory"/>
	</beans:bean>
	
	<!-- =========== 트랜잭션 ========== -->
	<!-- 1. spring 내부에서 jdbc를 이용할 때 트랜잭션 처리를 간편하게 작업할 수 있도록 지원되는 클래스를 등록 -->
	<beans:bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<!-- DB와 연결되어 있어야 트랜잭션 처리를 할 수 있고 커넥션에 있는 트랜잭션 관리 메소드를 이용하기 위해 -->
		<beans:property name="dataSource" ref="con"/>
	</beans:bean>
	<!-- 2. 트랜잭션에 대한 처리를 aop 적용 -->
		<!-- 1) Advice 등록(xml에서 등록) - 트랜잭션을 xml로 처리하는 방법 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- 트랜잭션을 적용할 메소드에 대한 정보(insert로 끝나는 메소드를 호출할 때 Exception이 발생하면 rollback 시켜라) -->
		<tx:attributes>
			<tx:method name="*insert" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>		
	
		<!-- 2) aop 적용 -->
	<aop:config proxy-target-class="true">
		<aop:pointcut expression="execution(public * emp.service.MyEmpServiceImpl.*(..))" id="trans"/>
		<aop:advisor id="txadvisor" advice-ref="txAdvice" pointcut-ref="trans"/>
	</aop:config>

	<!-- 인터셉터 등록 -->
	<interceptors>
		<interceptor>
			<mapping path="/count.do"/>
			<mapping path="/insert.do"/>
			<beans:bean class="etc.controller.TimeCheckInterceptor"/>
		</interceptor>
		<interceptor>
			<mapping path="/mybatisSearch.do"/>
			<mapping path="/mybatisList.do"/>
			<beans:bean class="etc.controller.LoginCheckInterceptor"/>
		</interceptor>
	</interceptors>
</beans:beans>
